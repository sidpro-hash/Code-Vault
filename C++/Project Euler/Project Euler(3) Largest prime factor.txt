An even number has the prime factor 2.
An odd number doen't have the prime factor 2.

With a proper algorithm this problem can be solved in 0.000161s, for an input of ten 1000000000000s.

the algorithm will be,

STEP-1: if the given N is even repeatedly divide by 2.

STEP-2: if the N becomes 1 return 2 which is the largest prime factor.

STEP-3: start with i=3, and check if the N is divisible by i. increment i by 2 (because there are no even factors for an odd number..). run the loop till square root of the N. if the N is divisible by i then divide the N by i and run the loop again from i =3. this step will eliminate all the composite numbers.

STEP-4: finally if N is grater 2 then its a prime number. return N. else return i which is the largest prime number.

The square root of 100 is 10. Let's say a x b = 100, for various pairs of a and b.

If a == b, then they are equal, and are the square root of 100, exactly. Which is 10.

If one of them is less than 10, the other has to be greater. For example, 5 x 20 == 100. One is greater than 10, the other is less than 10.

Thinking about a x b, if one of them goes down, the other must get bigger to compensate, so the product stays at 100. They pivot around the square root.

The square root of 101 is about 10.049875621. So if you're testing the number 101 for primality, you only need to try the integers up through 10, including 10. But 8, 9, and 10 are not themselves prime, so you only have to test up through 7, which is prime.

Because if there's a pair of factors with one of the numbers bigger than 10, the other of the pair has to be less than 10. If the smaller one doesn't exist, there is no matching larger factor of 101.

If you're testing 121, the square root is 11. You have to test the prime integers 1 through 11 (inclusive) to see if it goes in evenly. 11 goes in 11 times, so 121 is not prime. If you had stopped at 10, and not tested 11, you would have missed 11.

You have to test every prime integer greater than 2, but less than or equal to the square root, assuming you are only testing odd numbers.
------------------------------------------------------------------------------------------------------------------------
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;



int main(){
    int t;
    cin >> t;
    for(int a0 = 0; a0 < t; a0++){
        long n;
        cin >> n;
        long long maxPrime = -1;  
        while (n % 2 == 0) { 
            maxPrime = 2; 
            n >>= 1;  
        }  
        for (int i = 3; i <= sqrt(n); i += 2) { 
            while (n % i == 0) { 
                maxPrime = i; 
                n = n / i; 
            } 
        } 
        if (n > 2) 
            maxPrime = n;
            
        cout<<maxPrime<<endl; 
    }

    return 0;
}